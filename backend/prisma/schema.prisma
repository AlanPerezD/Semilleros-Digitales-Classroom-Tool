// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      String   // "student" | "teacher" | "coordinator"
  token     String?  // encrypted refresh token for demo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           Int          @id @default(autoincrement())
  gcId         String       @unique // Google Classroom courseId
  name         String
  teacherEmail String
  createdAt    DateTime     @default(now())
  courseworks  Coursework[]
}

model Student {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  cohort      String?
  createdAt   DateTime     @default(now())
  submissions Submission[]
  gcUserId    String?      @unique
}

model Coursework {
  id          Int          @id @default(autoincrement())
  gcId        String       @unique
  title       String
  description String?
  dueDate     DateTime?
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  createdAt   DateTime     @default(now())
  submissions Submission[]
}

model Submission {
  id           Int        @id @default(autoincrement())
  courseworkId Int
  studentEmail String
  state        String     // "TURNED_IN" | "RETURNED" | "NEW" | "CREATED" etc.
  submittedAt  DateTime?
  createdAt    DateTime   @default(now())
  coursework   Coursework @relation(fields: [courseworkId], references: [id])
  student      Student    @relation(fields: [studentEmail], references: [email])

  @@unique([courseworkId, studentEmail])
}

model Invitation {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  role      String   // "student" | "teacher" | "coordinator"
  cohort    String?
  createdAt DateTime @default(now())
}
